@page "/new"
@using JobHuntApiService
@using Microsoft.AspNetCore.Components.Forms;
@inject JobHuntApiClient JobHuntApiClient
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject ILogger<AddNewApplication> Logger





<EditForm Model="appDto" OnValidSubmit="Submit" OnInvalidSubmit="OnInvalidSubmit">
	<DataAnnotationsValidator />
	@* <ValidationSummary /> *@
	<div class="newApplicationContainer">
		<div class="form-group">
			<label for="company">Company name</label>
			<InputText id="company"
					   class="form-control"
					   @bind-Value="appDto.Company"
					   autocomplete="organization"
					   required
					   aria-required="true"
					   aria-describedby="company-validation" />
			<ValidationMessage For="@(() => appDto.Company)" />
		</div>

		<div class="form-group">
			<label for="jobTitle">Position</label>
			<InputText id="jobTitle"
					   class="form-control"
					   @bind-Value="appDto.JobTitle"
					   autocomplete="organization-title"
					   required
					   aria-required="true"
					   aria-describedby="jobTitle-validation" />
			<ValidationMessage For="@(() => appDto.JobTitle)" />
		</div>

		<div class="form-group">
			<label for="dateApplied">Date applied</label>
			<InputDate id="dateApplied"
					   class="form-control"
					   @bind-Value="appDto.Date"
					   aria-describedby="dateApplied-validation" />
			<ValidationMessage For="@(() => appDto.Date)" />
		</div>

		<div class="form-group">
			<label for="deadline">Deadline for application</label>
			<InputDate id="deadline"
					   class="form-control"
					   @bind-Value="appDto.Deadline"
					   aria-describedby="deadline-validation" />
			<ValidationMessage For="@(() => appDto.Deadline)" />
		</div>

		<fieldset>
			<legend>Attachments</legend>
			<div class="form-group">
				<label for="resume">Resume</label>
				<UploadFile Title="Upload Resume" OnFileUploaded="OnResumeUpload" OnFileRemoved="DeleteResume" JsModuleName="fileInputInteropModule" />
				<!-- If UploadFile forwards id/aria attributes, prefer passing id="resume" and aria-describedby="resume-validation" -->
				<ValidationMessage For="@(() => appDto.ResumePdf)" />
			</div>

			<div class="form-group">
				<label for="applicationPdf">Application</label>
				<UploadFile Title="Upload Application" OnFileUploaded="OnApplicationUpload" OnFileRemoved="DeleteApplication" JsModuleName="fileInputInteropModule" />
				<ValidationMessage For="@(() => appDto.ApplicationPdf)" />
			</div>
		</fieldset>


		<div class="form-actions">
			<button type="submit" class="btn btn-primary">Save application</button>
			<button type="button" class="btn btn-secondary">Cancel</button>
		</div>
	</div>
</EditForm>


@code {
	public NewJobApplicationDto appDto = new NewJobApplicationDto();
	
	[CascadingParameter]
	public User User { get; set; }

	protected override void OnInitialized()
	{
		appDto.Date = DateTime.Now;
		appDto.Deadline = DateTime.Now.AddMonths(1);
		base.OnInitialized();
	}

	public void DeletePdf(PdfFileDto pdfFileDto)
	{

	}
	private void OnResumeUpload((string Name, string ContentType, byte[] Data) file)
	{
		appDto.ResumePdf = new PdfFileDto()
		{
			FileName = file.Name,
			ContentType = file.ContentType,
			Content = file.Data
		};

	}

	private void OnApplicationUpload((string Name, string ContentType, byte[] Data) file)
	{
		appDto.ApplicationPdf = new PdfFileDto()
		{
			FileName = file.Name,
			ContentType = file.ContentType,
			Content = file.Data
		};
	}

	private Task DeleteResume()
	{
		appDto.ResumePdf = null;
		return Task.CompletedTask;
	}

	private Task DeleteApplication()
	{
		appDto.ApplicationPdf = null;
		return Task.CompletedTask;
	}

	private async Task Submit()
	{
		try
		{
			//temporary, I want the user instance to be available somewhere in the
			// cascading params
			var user = await GraphServiceClient.Me.Request().GetAsync();
			appDto.UserId = Guid.Parse(user.Id);
			await JobHuntApiClient.NewAsync(appDto);
		}
		catch (Exception e)
		{

			Logger.LogError("Error submitting new application: {Error}", e.Message);
		}
	}

	private void OnInvalidSubmit(EditContext context)
	{
		// Log validation errors; consider focusing the first invalid field here.
		Logger.LogWarning("Invalid submit: {@ValidationMessages}", context);
	}


}